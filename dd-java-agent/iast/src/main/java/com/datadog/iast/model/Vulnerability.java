package com.datadog.iast.model;

import datadog.trace.util.stacktrace.StackWalkerFactory;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public final class Vulnerability {

  private final @Nonnull VulnerabilityType type;

  private final @Nullable Location location;

  private final @Nullable Evidence evidence;

  private Vulnerability(
      final VulnerabilityType type, final Location location, final Evidence evidence) {
    this.type = type;
    this.location = location;
    this.evidence = evidence;
  }

  public VulnerabilityType getType() {
    return type;
  }

  public Location getLocation() {
    return location;
  }

  public Evidence getEvidence() {
    return evidence;
  }

  public static BuilderNeedsType builder() {
    return new Builder();
  }

  public interface BuilderNeedsType {
    BuilderNeedsEvidence type(VulnerabilityType type);
  }

  public interface BuilderNeedsEvidence {
    BuilderMore evidence(Evidence evidence);
  }

  public interface BuilderMore {
    BuilderMore location(Location location);

    BuilderMore computeLocation();

    Vulnerability build();
  }

  public static final class Builder implements BuilderNeedsType, BuilderNeedsEvidence, BuilderMore {
    private VulnerabilityType type;
    private Location location;
    private Evidence evidence;

    private Builder() {}

    public BuilderNeedsEvidence type(final @Nonnull VulnerabilityType type) {
      this.type = type;
      return this;
    }

    public BuilderMore evidence(final Evidence evidence) {
      this.evidence = evidence;
      return this;
    }

    public BuilderMore location(final Location location) {
      this.location = location;
      return this;
    }

    public BuilderMore computeLocation() {
      this.location =
          StackWalkerFactory.INSTANCE.walk(s -> s.findFirst().map(Location::forStack).orElse(null));
      return this;
    }

    public Vulnerability build() {
      return new Vulnerability(type, location, evidence);
    }
  }
}
